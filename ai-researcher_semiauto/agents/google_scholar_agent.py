import requests

class GoogleScholarSearchAgent:
    """
    Use a search query to call the google_scholar_search tool server API and return the search results.
    This agent is adapted for the tool server API described in tool.md (port 8001).
    """
    def __init__(self, tool_server_url="http://localhost:8001/api/tool/execute", task_id="scholar_search_task"):
        self.tool_server_url = tool_server_url
        self.task_id = task_id

    def run(self, query, output_dir=None, pages=1, year_low=None, year_high=None):
        """
        Call the google_scholar_search tool with the given query and return the search results.
        Args:
            query (str): The search query string (usually generated by QueryAnalysisAgent).
            output_dir (str, optional): Directory to save results under upload/. Default is 'scholar_results'.
            pages (int, optional): Number of pages to crawl. Default is 1.
            year_low (int, optional): Start year for filtering.
            year_high (int, optional): End year for filtering.
        Returns:
            dict: The data field from the tool server response, containing search results.
        Raises:
            RuntimeError: If the tool server returns an error or HTTP error occurs.
        """
        params = {"query": query}
        if output_dir is not None:
            params["output_dir"] = output_dir
        if pages is not None:
            params["pages"] = pages
        if year_low is not None:
            params["year_low"] = year_low
        if year_high is not None:
            params["year_high"] = year_high
        payload = {
            "task_id": self.task_id,
            "tool_name": "google_scholar_search",
            "params": params
        }
        response = requests.post(self.tool_server_url, json=payload)
        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                return result.get("data", {})
            else:
                raise RuntimeError(f"Tool server error: {result.get('error')}")
        else:
            raise RuntimeError(f"HTTP error: {response.status_code}, {response.text}") 