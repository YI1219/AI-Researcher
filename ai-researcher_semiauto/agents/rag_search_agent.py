import requests

class RAGSearchAbstractsAgent:
    """
    Use a search query to call the rag_search_abstracts tool server API and return the search results.
    This agent is adapted for the tool server API described in the updated tool.md (port 8001).
    """
    def __init__(self, tool_server_url="http://localhost:8001/api/tool/execute", task_id="rag_search_task", k=10, m=5):
        self.tool_server_url = tool_server_url
        self.task_id = task_id
        self.k = k
        self.m = m

    def run(self, query):
        """
        Call the rag_search_abstracts tool with the given query and return the search results.
        Args:
            query (str): The search query string (usually generated by QueryAnalysisAgent).
        Returns:
            dict: The data field from the tool server response, containing search results.
        Raises:
            RuntimeError: If the tool server returns an error or HTTP error occurs.
        """
        payload = {
            "task_id": self.task_id,
            "tool_name": "rag_search_abstracts",
            "params": {
                "query": query,
                "k": self.k,
                "m": self.m
            }
        }
        response = requests.post(self.tool_server_url, json=payload)
        if response.status_code == 200:
            result = response.json()
            if result.get("success"):
                return result.get("data", {})
            else:
                raise RuntimeError(f"Tool server error: {result.get('error')}")
        else:
            raise RuntimeError(f"HTTP error: {response.status_code}, {response.text}") 